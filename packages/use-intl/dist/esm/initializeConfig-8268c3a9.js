function n(n,e,t){return(e=function(n){var e=function(n,e){if("object"!=typeof n||null===n)return n;var t=n[Symbol.toPrimitive];if(void 0!==t){var o=t.call(n,e||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(n)}(n,"string");return"symbol"==typeof e?e:String(e)}(e))in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}let e=function(n){return n.MISSING_MESSAGE="MISSING_MESSAGE",n.MISSING_FORMAT="MISSING_FORMAT",n.ENVIRONMENT_FALLBACK="ENVIRONMENT_FALLBACK",n.INSUFFICIENT_PATH="INSUFFICIENT_PATH",n.INVALID_MESSAGE="INVALID_MESSAGE",n.INVALID_KEY="INVALID_KEY",n.FORMATTING_ERROR="FORMATTING_ERROR",n}({});class t extends Error{constructor(e,t){let o=e;t&&(o+=": "+t),super(o),n(this,"code",void 0),n(this,"originalMessage",void 0),this.code=e,t&&(this.originalMessage=t)}}function o(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.filter(Boolean).join(".")}function r(n){return o(n.namespace,n.key)}function a(n){console.error(n)}function s(n,e,t){Object.entries(n).forEach((n=>{let[r,a]=n;if(r.includes(".")){let n=r;t&&(n+=" (at ".concat(t,")")),e.push(n)}null!=a&&"object"==typeof a&&s(a,e,o(t,r))}))}function i(n,o){const r=[];s(n,r),r.length>0&&o(new t(e.INVALID_KEY,'Namespace keys can not contain the character "." as this is used to express nesting. Please remove it or replace it with another character.\n\nInvalid '.concat(1===r.length?"key":"keys",": ").concat(r.join(", "),'\n\nIf you\'re migrating from a flat structure, you can convert your messages as follows:\n\nimport {set} from "lodash";\n\nconst input = {\n  "one.one": "1.1",\n  "one.two": "1.2",\n  "two.one.one": "2.1.1"\n};\n\nconst output = Object.entries(input).reduce(\n  (acc, [key, value]) => set(acc, key, value),\n  {}\n);\n\n// Output:\n//\n// {\n//   "one": {\n//     "one": "1.1",\n//     "two": "1.2"\n//   },\n//   "two": {\n//     "one": {\n//       "one": "2.1.1"\n//     }\n//   }\n// }\n')))}function c(n){let{getMessageFallback:e,messages:t,onError:o,...s}=n;const c=o||a,u=e||r;return t&&i(t,c),{...s,messages:t,onError:c,getMessageFallback:u}}export{t as I,e as a,r as b,a as d,c as i,o as j};
